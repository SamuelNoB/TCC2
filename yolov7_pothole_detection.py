# -*- coding: utf-8 -*-
"""yolov7_pothole_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w2Cy2XAU4f3KC3KSoDSX5ga4zDjmZgxR

# Pothole Detection using YOLOv7

We carry out the following training experiments using YOLOv7 on the pothole dataset in this notebook:
* YOLOv7 Tiny model fixed resolution training.
* YOLOv7 Tiny model multi-resolution training.
* YOLOv7 normam model fixed resolution training.
* YOLOv7 normal model multi-resolution training.
"""

import os
import glob as glob
import matplotlib.pyplot as plt
import random
import cv2

# altere o caminho para os dataset para a localização dele
DATASET_BASE_PATH='drive/MyDrive/Colab Notebooks/TCC2/yolo test/pothole_dataset'

# Rode apenas se estiver no colab
# from google.colab import drive
# drive.mount('/content/drive')

"""## Download and Extract the Dataset"""

# Download the dataset. Remova o comentário para baixar
# !wget https://learnopencv.s3.us-west-2.amazonaws.com/pothole_dataset.zip

# Extract the dataset. Extraia para o mesmo caminho de DATASET_BASE_PATH. Remova o comentário para baixar
# !unzip -q pothole_dataset.zip

"""## Visualize Images from the Dataset"""

# Function to convert bounding boxes in YOLO format to xmin, ymin, xmax, ymax.
def yolo2bbox(bboxes):
    xmin, ymin = bboxes[0]-bboxes[2]/2, bboxes[1]-bboxes[3]/2
    xmax, ymax = bboxes[0]+bboxes[2]/2, bboxes[1]+bboxes[3]/2
    return xmin, ymin, xmax, ymax

def plot_box(image, bboxes, labels):
    # Need the image height and width to denormalize
    # the bounding box coordinates
    h, w, _ = image.shape
    for box_num, box in enumerate(bboxes):
        x1, y1, x2, y2 = yolo2bbox(box)
        # Denormalize the coordinates.
        xmin = int(x1*w)
        ymin = int(y1*h)
        xmax = int(x2*w)
        ymax = int(y2*h)

        thickness = max(2, int(w/275))

        cv2.rectangle(
            image,
            (xmin, ymin), (xmax, ymax),
            color=(0, 0, 255),
            thickness=thickness
        )
    return image

# Function to plot images with the bounding boxes.
def plot(image_paths, label_paths, num_samples):
    all_images = []
    all_images.extend(glob.glob(image_paths+'/*.jpg'))
    all_images.extend(glob.glob(image_paths+'/*.JPG'))
    all_labels = glob.glob(label_paths)

    all_images.sort()
    all_labels.sort()
    print(all_labels)
    num_images = len(all_images)

    plt.figure(figsize=(15, 12))
    for i in range(num_samples):
        j = random.randint(0,num_images-1)
        image = cv2.imread(all_images[j])
        with open(all_labels[j], 'r') as f:
            bboxes = []
            labels = []
            label_lines = f.readlines()
            for label_line in label_lines:
                label = label_line[0]
                bbox_string = label_line[2:]
                x_c, y_c, w, h = bbox_string.split(' ')
                x_c = float(x_c)
                y_c = float(y_c)
                w = float(w)
                h = float(h)
                bboxes.append([x_c, y_c, w, h])
                labels.append(label)
        result_image = plot_box(image, bboxes, labels)
        plt.subplot(2, 2, i+1)
        plt.imshow(result_image[:, :, ::-1])
        plt.axis('off')
    plt.subplots_adjust(wspace=1)
    plt.tight_layout()
    plt.show()

# Visualize a few training images.
plot(
    image_paths=DATASET_BASE_PATH+'/images/train/',
    label_paths=DATASET_BASE_PATH+'/labels/train/*.txt',
    num_samples=4,
)

"""## Clone the YOLOv7 GitHub Repository"""

if not os.path.exists('yolov7'):
    !git clone https://github.com/WongKinYiu/yolov7.git

# Commented out IPython magic to ensure Python compatibility.
# ir para a pasta do yolo
# %cd yolov7

# instalar os requisitos específico para o yolo
!pip install -r requirements.txt

"""## Create the Data YAML File"""

# Commented out IPython magic to ensure Python compatibility.
# # criar o arquivo yaml. Altere o caminho '/drive/MyDrive/Colab Notebooks/TCC2/yolo test/' para o correspondente no dataset
# %%writefile data/pothole.yaml
# train: ../drive/MyDrive/Colab Notebooks/TCC2/yolo test/pothole_dataset/images/train
# val: ../drive/MyDrive/Colab Notebooks/TCC2/yolo test/pothole_dataset/images/valid
# test: ../drive/MyDrive/Colab Notebooks/TCC2/yolo test/pothole_dataset/images/test
# 
# # Classes
# nc: 1  # number of classes
# names: ['pothole']  # class names

"""## YOLOv7 Tiny Model Fixed Resolution Training"""

# Download the Tiny model weights.
!wget https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-tiny.pt

# Commented out IPython magic to ensure Python compatibility.
# %%writefile cfg/training/yolov7_pothole-tiny.yaml
# # parameters
# nc: 1  # number of classes
# depth_multiple: 1.0  # model depth multiple
# width_multiple: 1.0  # layer channel multiple
# 
# # anchors
# anchors:
#   - [10,13, 16,30, 33,23]  # P3/8
#   - [30,61, 62,45, 59,119]  # P4/16
#   - [116,90, 156,198, 373,326]  # P5/32
# 
# # yolov7-tiny backbone
# backbone:
#   # [from, number, module, args] c2, k=1, s=1, p=None, g=1, act=True
#   [[-1, 1, Conv, [32, 3, 2, None, 1, nn.LeakyReLU(0.1)]],  # 0-P1/2
# 
#    [-1, 1, Conv, [64, 3, 2, None, 1, nn.LeakyReLU(0.1)]],  # 1-P2/4
# 
#    [-1, 1, Conv, [32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-2, 1, Conv, [32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, -2, -3, -4], 1, Concat, [1]],
#    [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 7
# 
#    [-1, 1, MP, []],  # 8-P3/8
#    [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-2, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, -2, -3, -4], 1, Concat, [1]],
#    [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 14
# 
#    [-1, 1, MP, []],  # 15-P4/16
#    [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-2, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, -2, -3, -4], 1, Concat, [1]],
#    [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 21
# 
#    [-1, 1, MP, []],  # 22-P5/32
#    [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-2, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [256, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [256, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, -2, -3, -4], 1, Concat, [1]],
#    [-1, 1, Conv, [512, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 28
#   ]
# 
# # yolov7-tiny head
# head:
#   [[-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-2, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, SP, [5]],
#    [-2, 1, SP, [9]],
#    [-3, 1, SP, [13]],
#    [[-1, -2, -3, -4], 1, Concat, [1]],
#    [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, -7], 1, Concat, [1]],
#    [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 37
# 
#    [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [21, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # route backbone P4
#    [[-1, -2], 1, Concat, [1]],
# 
#    [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-2, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, -2, -3, -4], 1, Concat, [1]],
#    [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 47
# 
#    [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [14, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # route backbone P3
#    [[-1, -2], 1, Concat, [1]],
# 
#    [-1, 1, Conv, [32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-2, 1, Conv, [32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, -2, -3, -4], 1, Concat, [1]],
#    [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 57
# 
#    [-1, 1, Conv, [128, 3, 2, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, 47], 1, Concat, [1]],
# 
#    [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-2, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, -2, -3, -4], 1, Concat, [1]],
#    [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 65
# 
#    [-1, 1, Conv, [256, 3, 2, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, 37], 1, Concat, [1]],
# 
#    [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-2, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [-1, 1, Conv, [128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [[-1, -2, -3, -4], 1, Concat, [1]],
#    [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 73
# 
#    [57, 1, Conv, [128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [65, 1, Conv, [256, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
#    [73, 1, Conv, [512, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
# 
#    [[74,75,76], 1, IDetect, [nc, anchors]],   # Detect(P3, P4, P5)
#   ]

#irá realizar o treinamento e salvar o resultado do treinamento em 'runs/trainyolov7_tiny_pothole_fixed_res'
!python train.py --epochs 20 --workers 4 --device 0 --batch-size 32 \
--data data/pothole.yaml --img 640 640 --cfg cfg/training/yolov7_pothole-tiny.yaml \
--weights 'yolov7-tiny.pt' --name yolov7_tiny_pothole_fixed_res --hyp data/hyp.scratch.tiny.yaml

"""* mAP = (mean Average Precision)
* P = Precisão
* R = Recall

**Precision** measures how accurate is your predictions. i.e. the percentage of your predictions are correct.

**Recall** measures how good you find all the positives. For example, we can find 80% of the possible positive cases in our top K predictions.
"""

!python test.py --weights runs/train/yolov7_tiny_pothole_fixed_res/weights/best.pt --task test --data data/pothole.yaml

# onde há o caminho '/drive/MyDrive/Colab\ Notebooks/TCC2/yolo\ test/mixkit-potholes-in-a-rural-road-25208-medium.mp4'
# deve-se alterar para o caminho do vídeo.mp4 que se deseja realizar a detecção.
# Ao fim, será gerado um resultado.

!python detect.py --source ../drive/MyDrive/Colab\ Notebooks/TCC2/yolo\ test/mixkit-potholes-in-a-rural-road-25208-medium.mp4 --weights runs/train/yolov7_tiny_pothole_fixed_res/weights/best.pt

"""## YOLOv7 Tiny Model Multi-Resolution Training"""

!python train.py --epochs 20 --workers 4 --device 0 --batch-size 32 \
--data data/pothole.yaml --img 640 640 --cfg cfg/training/yolov7_pothole-tiny.yaml \
--weights 'yolov7-tiny.pt' --name yolov7_tiny_pothole_multi_res --hyp data/hyp.scratch.tiny.yaml \
--multi-scale

!python test.py --weights runs/train/yolov7_tiny_pothole_multi_res/weights/best.pt --task test --data data/pothole.yaml

"""## YOLOv7 Normal Model Fixed Resolution Training"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile cfg/training/yolov7_pothole.yaml
# # parameters
# nc: 1  # number of classes
# depth_multiple: 1.0  # model depth multiple
# width_multiple: 1.0  # layer channel multiple
# 
# # anchors
# anchors:
#   - [12,16, 19,36, 40,28]  # P3/8
#   - [36,75, 76,55, 72,146]  # P4/16
#   - [142,110, 192,243, 459,401]  # P5/32
# 
# # yolov7 backbone
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Conv, [32, 3, 1]],  # 0
# 
#    [-1, 1, Conv, [64, 3, 2]],  # 1-P1/2
#    [-1, 1, Conv, [64, 3, 1]],
# 
#    [-1, 1, Conv, [128, 3, 2]],  # 3-P2/4
#    [-1, 1, Conv, [64, 1, 1]],
#    [-2, 1, Conv, [64, 1, 1]],
#    [-1, 1, Conv, [64, 3, 1]],
#    [-1, 1, Conv, [64, 3, 1]],
#    [-1, 1, Conv, [64, 3, 1]],
#    [-1, 1, Conv, [64, 3, 1]],
#    [[-1, -3, -5, -6], 1, Concat, [1]],
#    [-1, 1, Conv, [256, 1, 1]],  # 11
# 
#    [-1, 1, MP, []],
#    [-1, 1, Conv, [128, 1, 1]],
#    [-3, 1, Conv, [128, 1, 1]],
#    [-1, 1, Conv, [128, 3, 2]],
#    [[-1, -3], 1, Concat, [1]],  # 16-P3/8
#    [-1, 1, Conv, [128, 1, 1]],
#    [-2, 1, Conv, [128, 1, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [[-1, -3, -5, -6], 1, Concat, [1]],
#    [-1, 1, Conv, [512, 1, 1]],  # 24
# 
#    [-1, 1, MP, []],
#    [-1, 1, Conv, [256, 1, 1]],
#    [-3, 1, Conv, [256, 1, 1]],
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, -3], 1, Concat, [1]],  # 29-P4/16
#    [-1, 1, Conv, [256, 1, 1]],
#    [-2, 1, Conv, [256, 1, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [[-1, -3, -5, -6], 1, Concat, [1]],
#    [-1, 1, Conv, [1024, 1, 1]],  # 37
# 
#    [-1, 1, MP, []],
#    [-1, 1, Conv, [512, 1, 1]],
#    [-3, 1, Conv, [512, 1, 1]],
#    [-1, 1, Conv, [512, 3, 2]],
#    [[-1, -3], 1, Concat, [1]],  # 42-P5/32
#    [-1, 1, Conv, [256, 1, 1]],
#    [-2, 1, Conv, [256, 1, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [[-1, -3, -5, -6], 1, Concat, [1]],
#    [-1, 1, Conv, [1024, 1, 1]],  # 50
#   ]
# 
# # yolov7 head
# head:
#   [[-1, 1, SPPCSPC, [512]], # 51
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [37, 1, Conv, [256, 1, 1]], # route backbone P4
#    [[-1, -2], 1, Concat, [1]],
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-2, 1, Conv, [256, 1, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [[-1, -2, -3, -4, -5, -6], 1, Concat, [1]],
#    [-1, 1, Conv, [256, 1, 1]], # 63
# 
#    [-1, 1, Conv, [128, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [24, 1, Conv, [128, 1, 1]], # route backbone P3
#    [[-1, -2], 1, Concat, [1]],
# 
#    [-1, 1, Conv, [128, 1, 1]],
#    [-2, 1, Conv, [128, 1, 1]],
#    [-1, 1, Conv, [64, 3, 1]],
#    [-1, 1, Conv, [64, 3, 1]],
#    [-1, 1, Conv, [64, 3, 1]],
#    [-1, 1, Conv, [64, 3, 1]],
#    [[-1, -2, -3, -4, -5, -6], 1, Concat, [1]],
#    [-1, 1, Conv, [128, 1, 1]], # 75
# 
#    [-1, 1, MP, []],
#    [-1, 1, Conv, [128, 1, 1]],
#    [-3, 1, Conv, [128, 1, 1]],
#    [-1, 1, Conv, [128, 3, 2]],
#    [[-1, -3, 63], 1, Concat, [1]],
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-2, 1, Conv, [256, 1, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [-1, 1, Conv, [128, 3, 1]],
#    [[-1, -2, -3, -4, -5, -6], 1, Concat, [1]],
#    [-1, 1, Conv, [256, 1, 1]], # 88
# 
#    [-1, 1, MP, []],
#    [-1, 1, Conv, [256, 1, 1]],
#    [-3, 1, Conv, [256, 1, 1]],
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, -3, 51], 1, Concat, [1]],
# 
#    [-1, 1, Conv, [512, 1, 1]],
#    [-2, 1, Conv, [512, 1, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [-1, 1, Conv, [256, 3, 1]],
#    [[-1, -2, -3, -4, -5, -6], 1, Concat, [1]],
#    [-1, 1, Conv, [512, 1, 1]], # 101
# 
#    [75, 1, RepConv, [256, 3, 1]],
#    [88, 1, RepConv, [512, 3, 1]],
#    [101, 1, RepConv, [1024, 3, 1]],
# 
#    [[102,103,104], 1, IDetect, [nc, anchors]],   # Detect(P3, P4, P5)
#   ]

!wget https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7_training.pt

!python train.py --epochs 100 --workers 4 --device 0 --batch-size 16 --data data/pothole.yaml \
--img 640 640 --cfg cfg/training/yolov7_pothole.yaml --weights 'yolov7_training.pt' \
--name yolov7_pothole_fixed_res --hyp data/hyp.scratch.custom.yaml

!python test.py --weights runs/train/yolov7_pothole_fixed_res/weights/best.pt --task test --data data/pothole.yaml

"""## YOLOv7 Normal Model Multi-Resolution Training"""

!python train.py --epochs 100 --workers 4 --device 0 --batch-size 8 --data data/pothole.yaml \
--img 640 640 --cfg cfg/training/yolov7_pothole.yaml --weights 'yolov7_training.pt' \
--name yolov7_pothole_multi_res --hyp data/hyp.scratch.custom.yaml \
--multi-scale

!python test.py --weights runs/train/yolov7_pothole_multi_res/weights/best.pt --task test --data data/pothole.yaml